name: Build Image

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      production_release:
        description: "Is a production release"
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-push:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'
      
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3.0.0
        with:
          driver: docker-container

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}
      
      - name: Get Latest Tag
        id: get-tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0 || echo 'v0.0.0')" >> $GITHUB_ENV
      
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # https://github.com/docker/metadata-action?tab=readme-ov-file#basic
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5 # v5.0.0
        with:
          flavor: |
            latest=${{ inputs.production_release || false }}
            prefix=${{ env.LATEST_TAG }}-
            suffix=-{{date 'YYYY-MM-DD-hh-mm-ss'}}
          tags: |
              type=raw,value={{branch}},enable=${{ inputs.production_release == false || true }}
              type=raw,value=master,enable=${{ inputs.production_release || false }}

          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      # Note: If the push isn't enabled then we wont have the digest https://github.com/docker/build-push-action/issues/906 https://github.com/docker/build-push-action/issues/596
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      
      - name: Show Final Summary
        run: |
          echo "## ðŸŽ‰ Pipeline Finished Successfully! âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image | Tag |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|-----|" >> $GITHUB_STEP_SUMMARY

          TAGS="${{ steps.meta.outputs.tags }}"
          for token in $TAGS; do
            # Trim any extra whitespace
            token_trimmed=$(echo "$token" | xargs)
            # Split token on the last colon to separate image and tag
            image=$(echo "$token_trimmed" | rev | cut -d':' -f2- | rev)
            tag=$(echo "$token_trimmed" | rev | cut -d':' -f1 | rev)
            echo "| \`${image}\` | \`${tag}\` |" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build-and-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
